/*
 * Copyright Â© 2018 Apple Inc. and the ServiceTalk project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.gradle.api.internal.artifacts.dependencies.DefaultExternalModuleDependency

final TEST_FIXTURES_DEPENDENCY_SUFFIX = '-testFixtures'

buildscript {
  if (!repositories) {
    repositories {
      jcenter()
      maven { url "https://plugins.gradle.org/m2/" }
    }
  }

  dependencies {
    // The plugin is brought in via composite build inclusion, so no need to specify a version.
    classpath "io.servicetalk:servicetalk-gradle-plugin-internal"  }
}

// Composite builds do not correctly substitute test fixtures dependencies
// because they target a custom configuration (namely: testFixturesRuntime).
// We work around this problem by replacing test fixtures artifact dependencies
// by module dependencies using the appropriate configuration.
// Note that this workaround may not be required in the future, as the composite
// build feature evolves and improves in Gradle.
ext.replaceTestFixtures = { includedBuild, name ->
  def config = includedBuild.configuredBuild.rootProject.configurations.findByName(name)
  if (config) {
    config.dependencies.findAll { it.name.endsWith TEST_FIXTURES_DEPENDENCY_SUFFIX }.each {
      def projectDependency =
          new DefaultExternalModuleDependency(
              it.group,
              it.name.substring(0, it.name.length() - TEST_FIXTURES_DEPENDENCY_SUFFIX.length()),
              it.version,
              'testFixturesRuntime')
      config.dependencies.add(projectDependency)
      config.dependencies.remove(it)
    }
  }
}
gradle.includedBuilds.each {
  replaceTestFixtures(it, 'testImplementation')
  replaceTestFixtures(it, 'testFixturesImplementation')
}

project.configure(project) {
  io.servicetalk.gradle.plugin.internal.ServiceTalkLibraryPlugin.applyIdeaPlugin(gradle.rootProject)
  io.servicetalk.gradle.plugin.internal.ServiceTalkLibraryPlugin.applyEclipsePlugin(gradle.rootProject)
  io.servicetalk.gradle.plugin.internal.ServiceTalkCorePlugin.applyLicensePlugin(gradle.rootProject)
}

ext.findTasks = { taskName, excludedBuilds = [] ->
  gradle.includedBuilds.findAll { !excludedBuilds.contains(it.name) }.collect { it.task(taskName) }
}

// Add tasks for composite:

task clean {
  dependsOn gradle.includedBuilds*.task(':clean')
}

task javadoc {
  dependsOn gradle.includedBuilds*.task(':javadoc')
}

task 'package' {
  dependsOn findTasks(':package', ['servicetalk-examples'])
}

task test {
  dependsOn gradle.includedBuilds*.task(':test')
}

task check {
  dependsOn gradle.includedBuilds*.task(':check')
}

task build {
  dependsOn gradle.includedBuilds*.task(':build')
}

task checkstyle {
  dependsOn findTasks(':checkstyle',
    ['servicetalk-bom-internal', 'servicetalk-examples', 'servicetalk-gradle-plugin-internal'])
}

task pmd {
  dependsOn findTasks(':pmd',
    ['servicetalk-bom-internal', 'servicetalk-examples', 'servicetalk-gradle-plugin-internal'])
}

task spotbugs {
  dependsOn findTasks(':spotbugs',
    ['servicetalk-bom-internal', 'servicetalk-examples', 'servicetalk-gradle-plugin-internal'])
}

task quality {
  dependsOn findTasks(':quality',
    ['servicetalk-bom-internal', 'servicetalk-examples', 'servicetalk-gradle-plugin-internal'])
}

task bintrayUpload {
  dependsOn findTasks(':bintrayUpload', ['servicetalk-benchmarks', 'servicetalk-examples'])
}

// Override behavior for existing tasks:

task publish(overwrite: true) {
  dependsOn findTasks(':publish', ['servicetalk-benchmarks'])
}

task publishToMavenLocal(overwrite: true) {
  dependsOn findTasks(':publishToMavenLocal', ['servicetalk-benchmarks', 'servicetalk-examples'])
}

task license(overwrite: true) {
  dependsOn licenseRoot
  dependsOn gradle.includedBuilds*.task(':license')
}

task licenseFormat(overwrite: true) {
  dependsOn licenseFormatRoot
  dependsOn gradle.includedBuilds*.task(':licenseFormat')
}
