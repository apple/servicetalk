/*
 * Copyright Â© 2020-2021 Apple Inc. and the ServiceTalk project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.servicetalk.http.netty;

import io.servicetalk.http.api.BlockingHttpClient;
import io.servicetalk.http.api.HttpResponseStatus;
import io.servicetalk.http.api.HttpServerBuilder;
import io.servicetalk.http.api.SingleAddressHttpClientBuilder;
import io.servicetalk.transport.api.HostAndPort;
import io.servicetalk.transport.api.ServerContext;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.net.InetSocketAddress;
import java.net.SocketOption;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Stream;

import static io.servicetalk.transport.api.ServiceTalkSocketOptions.TCP_FASTOPEN_BACKLOG;
import static io.servicetalk.transport.api.ServiceTalkSocketOptions.TCP_FASTOPEN_CONNECT;
import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;
import static io.servicetalk.transport.netty.internal.AddressUtils.serverHostAndPort;
import static java.util.Collections.emptyMap;
import static java.util.Collections.singletonMap;
import static org.junit.jupiter.api.Assertions.assertEquals;

class TcpFastOpenTest {

    @SuppressWarnings("unused")
    private static Stream<Arguments> sslProviders() {
        return Stream.of(
                Arguments.of(emptyMap(), emptyMap()),
                Arguments.of(emptyMap(), clientTcpFastOpenOptions()),
                Arguments.of(serverTcpFastOpenOptions(), emptyMap()),
                Arguments.of(serverTcpFastOpenOptions(), clientTcpFastOpenOptions())
        );
    }

    @SuppressWarnings("rawtypes")
    static Map<SocketOption, Object> clientTcpFastOpenOptions() {
        return singletonMap(TCP_FASTOPEN_CONNECT, true);
    }

    @SuppressWarnings("rawtypes")
    static Map<SocketOption, Object> serverTcpFastOpenOptions() {
        return singletonMap(TCP_FASTOPEN_BACKLOG, 1);
    }

    @ParameterizedTest
    @MethodSource("sslProviders")
    void requestSucceedsEvenIfTcpFastOpenNotEnabledOrSupported(
            @SuppressWarnings("rawtypes") final Map<SocketOption, Object> serverListenOptions,
            @SuppressWarnings("rawtypes") final Map<SocketOption, Object> clientOptions)
        throws Exception {
        HttpServerBuilder serverBuilder = HttpServers.forAddress(localAddress(0));
        for (@SuppressWarnings("rawtypes") Entry<SocketOption, Object> entry : serverListenOptions.entrySet()) {
            @SuppressWarnings("unchecked")
            SocketOption<Object> option = entry.getKey();
            serverBuilder.listenSocketOption(option, entry.getValue());
        }
        try (ServerContext serverContext = serverBuilder.listenBlockingAndAwait(
                (ctx, request, responseFactory) -> responseFactory.ok());
             BlockingHttpClient client = newClientBuilder(serverContext, clientOptions).buildBlocking()) {
            assertEquals(HttpResponseStatus.OK, client.request(client.get("/")).status());
        }
    }

    private SingleAddressHttpClientBuilder<HostAndPort, InetSocketAddress> newClientBuilder(
            ServerContext serverContext,
            @SuppressWarnings("rawtypes") final Map<SocketOption, Object> clientOptions) {
        SingleAddressHttpClientBuilder<HostAndPort, InetSocketAddress> builder =
                HttpClients.forSingleAddress(serverHostAndPort(serverContext));
        for (@SuppressWarnings("rawtypes") Entry<SocketOption, Object> entry : clientOptions.entrySet()) {
            @SuppressWarnings("unchecked")
            SocketOption<Object> option = entry.getKey();
            builder.socketOption(option, entry.getValue());
        }
        return builder;
    }
}
