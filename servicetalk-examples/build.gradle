/*
 * Copyright Â© 2018 Apple Inc. and the ServiceTalk project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
if (!repositories) {
  repositories {
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
  }
}

apply plugin: "java"
apply plugin: "idea"

dependencies {
  // `servicetalk-bom` brings consistent version of ServiceTalk modules.
  implementation "io.servicetalk:servicetalk-bom:0.2.0-SNAPSHOT"

  // If you use 3-party dependencies in your application, you have to specify it as an explicit dependency,
  // including group id, artifact id and version.
  implementation "com.google.code.findbugs:jsr305:$jsr305Version"
  // The version for all ServiceTalk dependencies will be resolved based on information in `servicetalk-bom`.
  implementation "io.servicetalk:servicetalk-annotations"
  implementation "io.servicetalk:servicetalk-buffer-netty"
  implementation "io.servicetalk:servicetalk-concurrent-internal" // hmm
  implementation "io.servicetalk:servicetalk-data-jackson"
  // We could use jersey-media-json-jackson instead. Using servicetalk-data-jackson-jersey allows us to avoid the
  // input stream adaptation that kicks in with out-of-the-box body readers and also allows accepting/returning
  // Single<Pojo> and Publisher<Pojo> from resource methods.
  implementation "io.servicetalk:servicetalk-data-jackson-jersey"
  implementation "io.servicetalk:servicetalk-dns-discovery-netty"
  implementation "io.servicetalk:servicetalk-http-api"
  implementation "io.servicetalk:servicetalk-http-netty"
  implementation "io.servicetalk:servicetalk-http-router-jersey"
  implementation "io.servicetalk:servicetalk-http-router-predicate"
  implementation "io.servicetalk:servicetalk-http-utils"
  implementation "io.servicetalk:servicetalk-loadbalancer"
  implementation "io.servicetalk:servicetalk-serialization-api"
  implementation "io.servicetalk:servicetalk-transport-netty"
  implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
  implementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
  implementation "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion"

  // Applications should not depend on bom-internal as it is intended for _internal_ ServiceTalk use cases only:
  // This is necessary here due to quirks in how the Gradle composite build works.
  // - When examples are part of a Gradle composite project, 3rd-party dependencies that are used by ServiceTalk
  // internally are not resolved correctly. Explicitly using bom-internal here allows the resolution to succeed.
  // - On the other hand, when examples is built as a standalone project, the bom-internal dependency is useless and
  // has no effect: transitive 3rd-party dependencies are correctly resolved for each ServiceTalk dependency.
  implementation "io.servicetalk:servicetalk-bom-internal:0.2.0-SNAPSHOT"
}
