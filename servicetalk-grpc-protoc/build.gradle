/*
 * Copyright Â© 2019 Apple Inc. and the ServiceTalk project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  dependencies {
    classpath "com.github.jengelman.gradle.plugins:shadow:$shadowPluginVersion"
    classpath "com.google.protobuf:protobuf-gradle-plugin:$protobufGradlePluginVersion"
  }
}

apply plugin: "io.servicetalk.servicetalk-gradle-plugin-internal-library"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "com.google.protobuf"

dependencies {
  implementation project(":servicetalk-annotations")
  implementation "com.google.code.findbugs:jsr305:$jsr305Version"
  implementation "com.google.protobuf:protobuf-java:$protobufVersion"
  implementation "com.squareup:javapoet:$javaPoetVersion"

  testImplementation project(":servicetalk-grpc-api")
  testImplementation project(":servicetalk-grpc-protobuf")
  testImplementation "junit:junit:$junitVersion"
}

jar {
  manifest {
    attributes "Implementation-Title": "ServiceTalk gRPC Protoc Plugin",
        "Implementation-Version": project.version,
        "Main-Class": "io.servicetalk.grpc.protoc.Main"
  }
}

shadowJar {
  archiveBaseName = project.name + "-all"
  classifier = ''
}

def grpcPluginUberJarName = project.name + "-" + project.version + "-all.jar"

task buildExecutable(type: Copy) {
  dependsOn tasks.shadowJar
  from shadowJar.outputs.files.singleFile
  into file("$buildDir/buildExecutable")

  rename { fileName ->
    return grpcPluginUberJarName
  }
}
tasks.compileJava.finalizedBy(buildExecutable)

publishing {
  publications {
    mavenJava {
      artifact(shadowJar.outputs.files.singleFile) {
        classifier = "all"
        extension = "jar"
      }
    }
  }
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:$protobufVersion"
  }
  // Used for testing
  plugins {
    servicetalk_grpc {
      path = file("${project.rootProject.rootDir}/servicetalk-grpc-protoc/build" +
                  "/buildExecutable/servicetalk-grpc-protoc-${project.version}-all.jar").path
    }
  }
  generateProtoTasks {
    all().each { task ->
      task.plugins {
        servicetalk_grpc {
          // Need to tell protobuf-gradle-plugin to output in the correct directory if all generated
          // code for a single proto goes to a single file (e.g. "java_multiple_files = false" in the .proto).
          outputSubDir = "java"
        }
      }
    }
  }
  generatedFilesBaseDir = "$buildDir/generated/sources/proto"
}

afterEvaluate {
  // break the circular dependency (compileJava->generateProto->buildExecutable->compileJava).
  generateProto.enabled = false
}

clean {
  delete protobuf.generatedFilesBaseDir
}
