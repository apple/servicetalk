/*
 * Copyright Â© 2019 Apple Inc. and the ServiceTalk project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
  dependencies {
    classpath "com.github.jengelman.gradle.plugins:shadow:$shadowPluginVersion"
    classpath "com.google.protobuf:protobuf-gradle-plugin:$protobufGradlePluginVersion"
  }
}

apply plugin: "io.servicetalk.servicetalk-gradle-plugin-internal-library"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "com.google.protobuf"

dependencies {
  implementation project(":servicetalk-annotations")
  implementation "com.google.code.findbugs:jsr305:$jsr305Version"
  implementation "com.google.protobuf:protobuf-java:$protobufVersion"
  implementation "com.squareup:javapoet:$javaPoetVersion"

  testImplementation project(":servicetalk-grpc-api")
  testImplementation project(":servicetalk-grpc-protobuf")
}

jar {
  manifest {
    attributes "Implementation-Title": "ServiceTalk gRPC Protoc Plugin",
        "Implementation-Version": project.version,
        "Main-Class": "io.servicetalk.grpc.protoc.Main"
  }
}

shadowJar {
  baseName = project.name + "-all"
  classifier = ''
}

task buildExecutable {
  def outputFile = file("$buildDir/buildExecutable/protoc-gen-servicetalk_grpc.exe")
  inputs.files shadowJar.outputs.files
  outputs.file outputFile

  doLast {
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
      throw new GradleException("Windows is currently not supported")
    }

    outputFile.parentFile.mkdirs()
    outputFile.delete()
    outputFile <<
        '''#!/bin/sh
exec java -jar "$0" "$@"
exit1
'''
    shadowJar.outputs.files.singleFile.withInputStream { outputFile.append(it) }
    outputFile.executable = true
  }
}
classes.finalizedBy(buildExecutable)

publishing {
  publications {
    mavenJava {
      artifact(buildExecutable.outputs.files.singleFile) {
        classifier = "linux-x86_64"
        extension = "exe"
        builtBy buildExecutable
      }
      artifact(buildExecutable.outputs.files.singleFile) {
        classifier = "osx-x86_64"
        extension = "exe"
        builtBy buildExecutable
      }
    }
  }
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:$protobufVersion"
  }

  plugins {
    servicetalk_grpc {
      path = "$buildDir/buildExecutable/protoc-gen-servicetalk_grpc.exe"
    }
  }

  // We validate that our protoc plugin outputs valid code by generating test classes which are compiled by Gradle
  generateProtoTasks {
    ofSourceSet("test").each { task ->
      task.plugins {
        servicetalk_grpc {
          outputSubDir = "java"
        }
      }
    }
  }
}

clean {
  delete protobuf.generatedFilesBaseDir
}
