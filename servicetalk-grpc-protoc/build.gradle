/*
 * Copyright Â© 2019, 2021 Apple Inc. and the ServiceTalk project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id "com.github.johnrengelman.shadow" version "$shadowPluginVersion"
  id "com.google.protobuf" version "$protobufGradlePluginVersion"
}

apply plugin: "io.servicetalk.servicetalk-gradle-plugin-internal-library"

dependencies {
  implementation platform(project(":servicetalk-dependencies"))
  testImplementation enforcedPlatform("org.junit:junit-bom:$junit5Version")

  implementation project(":servicetalk-annotations")

  // Needed for the generated classes
  api project(":servicetalk-data-protobuf")

  compileOnly "com.google.code.findbugs:jsr305"
  compileOnly "com.squareup:javapoet:$javaPoetVersion"

  testImplementation project(":servicetalk-grpc-api")
  testImplementation project(":servicetalk-grpc-protobuf")
  testImplementation "com.squareup:javapoet:$javaPoetVersion"
  testImplementation "org.junit.jupiter:junit-jupiter-api"
  testImplementation "org.hamcrest:hamcrest:$hamcrestVersion"
}

jar {
  manifest {
    attributes "Implementation-Title": "ServiceTalk gRPC Protoc Plugin",
        "Implementation-Version": project.version,
        "Main-Class": "io.servicetalk.grpc.protoc.Main"
  }
}

shadowJar {
  // includes javaPoet and Google protobufs
  configurations = [project.configurations.compileClasspath]
  archiveBaseName = project.name
  classifier = 'all'
}

def grpcPluginUberJarName = project.name + "-" + project.version + "-all.jar"

task buildExecutable(type: Copy) {
  dependsOn tasks.shadowJar
  from shadowJar.outputs.files.singleFile
  into file("$buildDir/buildExecutable")

  rename { fileName ->
    return grpcPluginUberJarName
  }
}
tasks.compileJava.finalizedBy(buildExecutable)

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:$protobufVersion"
  }
  def pluginJar = file("${buildExecutable.destinationDir}/$grpcPluginUberJarName")
  // Used for testing
  plugins {
    servicetalk_grpc {
      path = pluginJar
    }
  }
  generateProtoTasks {
    all().each { task ->
      task.generateDescriptorSet = true
      task.descriptorSetOptions.includeImports = true
      task.inputs
          .file(pluginJar)
          .withNormalizer(ClasspathNormalizer)
          .withPropertyName("servicetalkPluginJar")
          .withPathSensitivity(PathSensitivity.RELATIVE)

      if (task.isTest) {
        task.dependsOn(buildExecutable)
      }

      task.plugins {
        servicetalk_grpc {
          // Need to tell protobuf-gradle-plugin to output in the correct directory if all generated
          // code for a single proto goes to a single file (e.g. "java_multiple_files = false" in the .proto).
          outputSubDir = "java"
        }
      }
    }
  }
  generatedFilesBaseDir = "$buildDir/generated/sources/proto"
}

afterEvaluate {
  // break the circular dependency (compileJava->generateProto->buildExecutable->compileJava).
  generateProto.enabled = false
}

clean {
  delete protobuf.generatedFilesBaseDir
}

task testJavadoc(type: Javadoc) {
  dependsOn tasks.compileTestJava

  source = protobuf.generatedFilesBaseDir
  exclude "**/*.desc"
  classpath = sourceSets.test.compileClasspath
  destinationDir = file("$buildDir/tmp/testjavadoc")
  options.addBooleanOption("Xdoclint:syntax", true)
  options.addBooleanOption("Xdoclint:html", true)
  options.addBooleanOption("Xdoclint:accessibility", true)
  // Don't use Xdoclint:missing for now because not all methods/types have javadocs.
}

test.finalizedBy(testJavadoc)

test {
  systemProperty 'generatedFilesBaseDir', protobuf.generatedFilesBaseDir
}
